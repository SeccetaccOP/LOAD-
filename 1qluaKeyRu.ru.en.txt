-- ======== SETTINGS ======== --
localSETTINGS = {
    WALK_SPEED = {
        DEFAULT = 16,
        MIN = 0,
        MAX = 150
    },
    JUMP_POWER = {
        DEFAULT = 50,
        MIN = 0,
        MAX = 500
    },
    FOV = {
        DEFAULT = 70,
        MIN = 0,
        MAX = 120
    },
    TIME = {
        DEFAULT = 12,
        MIN = 0,
        MAX = 24
    }
}

-- Function to create a folder without a key
local function createNoKeyFolder()
    -- Checking available file writing methods
    local canWrite = false
    local writeMethods = {
        writefile,
        makefolder,
        saveinstance
    }
    
    for _, method in pairs(writeMethods) do
        if type(method) == "function" then
            canWrite = true
            break
        end
    end
    
    if not canWrite then
        Compkiller.newNotify().new({
            Title = "Error",
            Content = "Your exploit does not support writing files",
            Duration = 5,
            Icon = "rbxassetid://120245531583106"
        })
        return
    end
    
    -- Trying to create a folder
    local success, err = pcall(function()
        -- We are checking different possible paths
        local paths = {
            "1qluaNoRuKey",
            "workspace/1qluaNoRuKey",
            "exploit/1qluaNoRuKey",
            "bin/1qluaNoRuKey"
        }
        
        local created = false
        for _, path in ipairs(paths) do
            if not created then
                pcall(function()
                    makefolder(path)
                    created = true
                    writefile(path.."/README.txt", "This folder is created for keyless login")
                end)
            end
        end
        
        if not created then
            error("Could not create folder in any of the possible directories")
        end
    end)
    
    if success then

    else
        Compkiller.newNotify().new({
            Title = "Error",
            Content = "Failed to create folder: "..tostring(err),
            Duration = 5,
            Icon = "rbxassetid://120245531583106"
        })
    end
end

-- Variables
localview = nil
localviewDied = nil
local viewChanged = nil
local Players = game:GetService("Players")
local speaker = Players.LocalPlayer

-- Helper functions
local function StopFreecam()
    -- Add your freecam stopping logic here if needed
end

local function getPlayer(name, speaker)
    local found = {}
    local nameLower = name:lower()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= speaker then
            if player.Name:lower():find(nameLower) or player.DisplayName:lower():find(nameLower) then
                table.insert(found, player)
            end
        end
    end
    return found
end

local function getRoot(character)
    return character:FindFirstChild("HumanoidRootPart") or character:FindFirstChild("Torso") or character:FindFirstChild("UpperTorso")
end

-- Initialization of services
local Lighting = game:GetService("Lighting")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- Global variables
local xrayEnabled = false
local xrayLoop = nil
local brightLoop = nil

-- XRay function
local function xray()
    for _, v in pairs(workspace:GetDescendants()) do
        if v:IsA("BasePart") and not v.Parent:FindFirstChildOfClass("Humanoid") and not v.Parent.Parent:FindFirstChildOfClass("Humanoid") then
            v.LocalTransparencyModifier = xrayEnabled and 0.7 or 0
        end
    end
end

-- Variables
local ESPenabled = false
local CHMSenabled = false -- Assuming you have chams elsewhere
local speaker = game.Players.LocalPlayer

-- Global variables
_G.Walk = SETTINGS.WALK_SPEED.DEFAULT
_G.WalkSpeedEnabled = true

local Players = game:GetService("Players")
local COREGUI = game:GetService("CoreGui")

-- ======== INITIALIZING LIBRARY ======== --
local Compkiller = loadstring(game:HttpGet("https://raw.githubusercontent.com/1Qlua-RBXscript/1qlua/refs/heads/main/source"))()
local Notifier = Compkiller.newNotify()
local ConfigManager = Compkiller:ConfigManager({
    Directory = "1Qlua-Config",
    Config = "Main-Config"
})

-- Loading interface
Compkiller:Loader("rbxassetid://80494437171393", 2.5).yield()

-- ======== CREATING A WINDOW ======== --
local Window = Compkiller.new({
    Name = "1Qlua - Universal hub",
    Keybind = "LeftAlt",
    Logo = "rbxassetid://80494437171393",
    Scale = Compkiller.Scale.Window,
    TextSize = 15,
})

-- Notification on startup
Notifier.new({
    Title = "1Qlua",
    Content = "Universal script hub loaded!",
    Duration = 8,
    Icon = "rbxassetid://80494437171393"
})

-- ======== WATERMARK ======== --
local Watermark = Window:Watermark()
Watermark:AddText({
    Icon = "user",
    Text = "1Qlua",
})
Watermark:AddText({
    Icon = "server",
    Text = "Version 19",
})
Watermark:AddText({
    Icon = "clock",
    Text = Compkiller:GetDate(),
})

-- ======== SPEED HANDLE ======== --
local Heartbeat = game:GetService("RunService").Heartbeat
local Player = game:GetService("Players").LocalPlayer

local function UpdateSpeed()
    if not _G.WalkSpeedEnabled then return end
    local character = Player.Character
    if character then
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = _G.Walk
        end
    end
end

Heartbeat:Connect(UpdateSpeed)
Player.CharacterAdded:Connect(function(character)
    character:WaitForChild("Humanoid")
    UpdateSpeed()
end)

-- ======== FUNCTIONS ======== --
localFunctions = {}

Functions.JumpPower = function(value)
    local humanoid = Player.Character and Player.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.JumpPower = value
    end
    Player.CharacterAdded:Connect(function(character)
        character:WaitForChild("Humanoid").JumpPower = value
    end)
end

Functions.FOV = function(value)
    workspace.CurrentCamera.FieldOfView = value
    workspace:GetPropertyChangedSignal("CurrentCamera"):Connect(function()
        if workspace.CurrentCamera then
            workspace.CurrentCamera.FieldOfView = value
        end
    end)
end

Functions.TimeOfDay = function(hours)
    local Lighting = game:GetService("Lighting")
    Lighting.ClockTime = hours % 12 == 0 and 12 or hours % 12
end

Functions.LoadScript = function(url)
    local success, err = pcall(loadstring(game:HttpGet(url)))
    if not success then
        Notifier.new({
            Title = "Error",
            Content = "Loading error: "..err,
            Duration = 5,
            Icon = "rbxassetid://7734068321"
        })
    end
end

-- ======== TABS ======== --
Window:DrawCategory({Name = "Main"})

-- Player Tab
local PlayerTab = Window:DrawTab({
    Name = "Player",
    Icon = "user",
    EnableScrolling = true
})

local PlayerMainSection = PlayerTab:DrawSection({
    Name = "Basic settings",
    Position = "left"
})

PlayerMainSection:AddButton({
    Name = "Click to enter without a key",
    Callback = createNoKeyFolder
})

PlayerMainSection:AddSlider({
    Name = "Movement speed",
    Description = "Changes your character's speed",
    Min = 0,
    Max = 150,
    Default = 16,
    Callback = function(v) _G.Walk = v end
})

PlayerMainSection:AddSlider({
    Name = "Jump Height",
    Description = "Changes the height of the character's jump",
    Min = 0,
    Max = 500,
    Default = 50,
    Callback = Functions.JumpPower
})

PlayerMainSection:AddSlider({
    Name = "Field of View (FOV)",
    Description = "Changes the camera's viewing angle",
    Min = 0,
    Max = 120,
    Default = 70,
    Callback = Functions.FOV
})

PlayerMainSection:AddSlider({
    Name = "Time of day",
    Description = "Changes the current time in the game",
    Min = 0,
    Max = 24,
    Default = 12,
    Callback = Functions.TimeOfDay
})

local HitboxSection = PlayerTab:DrawSection({
    Name = "Main Settings",
    Position = 'left'
});

-- Variables for storing settings
local hitboxEnabled = false
local currentPlayers = {}
local hitboxSize = 2
local hitboxTransparency = 0.4
local selectedPlayerOptions = {"All"}

-- Function to get the list of players
local function getPlayerList()
    localplayers = {}
    for _, player in pairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer then
            table.insert(players, player.Name)
        end
    end
    return players
end

-- Function for updating hitboxes
local function updateHitboxes()
    for _, player in pairs(game.Players:GetPlayers()) do
        if player.Character and player.Character:FindFirstChild('HumanoidRootPart') then
            local root = player.Character.HumanoidRootPart
            
            -- Check if this player should have a hitbox
            local shouldHaveHitbox = false
            if hitboxEnabled then
                if table.find(selectedPlayerOptions, "All") then
                    shouldHaveHitbox = (player ~= game.Players.LocalPlayer)
                else
                    local isEnemy = not player.Team or player.Team ~= game.Players.LocalPlayer.Team
                    if table.find(selectedPlayerOptions, "Enemies") and isEnemy then
                        shouldHaveHitbox = true
                    elseif table.find(selectedPlayerOptions, "Team") and not isEnemy then
                        shouldHaveHitbox = true
                    elseif table.find(selectedPlayerOptions, player.Name) then
                        shouldHaveHitbox = true
                    end
                end
            end
            
            if shouldHaveHitbox then
                root.Size = Vector3.new(hitboxSize, hitboxSize, hitboxSize)
                root.Transparency = hitboxTransparency
            else
                root.Size = Vector3.new(2, 1, 1)
                root.Transparency = 1
            end
        end
    end
end

-- Toggle to enable/disable hitboxes
HitboxSection:AddToggle({
    Name = "Enable Hitboxes",
    Flag = "Hitbox_Enabled",
    Default = false,
    Callback = function(value)
        hitboxEnabled = value
        updateHitboxes()
    end
})

-- Slider for hitbox size
HitboxSection:AddSlider({
    Name = "Hitbox Size",
    Min = 1,
    Max = 10,
    Default = 2,
    Round = 1,
    Flag = "Hitbox_Size",
    Callback = function(value)
        hitboxSize = value
        if hitboxEnabled then
            updateHitboxes()
        end
    end
})

-- Slider for transparency
HitboxSection:AddSlider({
    Name = "Transparency",
    Min = 0,
    Max = 1,
    Default = 0.4,
    Round = 0.1,
    Flag = "Hitbox_Transparency",
    Callback = function(value)
        hitboxTransparency = value
        if hitboxEnabled then
            updateHitboxes()
        end
    end
})

-- Players' choice
local playerOptions = {"All", "Enemies", "Team"}
local playerNames = getPlayerList()
for _, name in pairs(playerNames) do
    table.insert(playerOptions, name)
end

HitboxSection:AddDropdown({
    Name = "Select Players",
    Default = {"All"},
    Multi = true,
    Flag = "Hitbox_Players",
    Values = playerOptions,
    Callback = function(selected)
        selectedPlayerOptions = selected
        if hitboxEnabled then
            updateHitboxes()
        end
    end
})

-- Button to refresh the list of players
HitboxSection:AddButton({
    Name = "Refresh Players",
    Callback = function()
        playerOptions = {"All", "Enemies", "Team"}
        playerNames = getPlayerList()
        for _, name in pairs(playerNames) do
            table.insert(playerOptions, name)
        end
        
        -- Save the current selection
        local currentSelection = selectedPlayerOptions
        updateHitboxes()
    end
})

-- Automatic update when new players appear
game.Players.PlayerAdded:Connect(function(player)
    playerOptions = {"All", "Enemies", "Team"}
    playerNames = getPlayerList()
    for _, name in pairs(playerNames) do
        table.insert(playerOptions, name)
    end
end)

game.Players.PlayerRemoving:Connect(function(player)
    playerOptions = {"All", "Enemies", "Team"}
    playerNames = getPlayerList()
    for _, name in pairs(playerNames) do
        table.insert(playerOptions, name)
    end
end)


-- Variables for CFly
localCFlyEnabled = false
localCFlySpeed = 50
localCFlyLoop = nil
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local head = character:WaitForChild("Head")

-- CFly enable function
local function EnableCFly()
    if CFlyLoop then CFlyLoop:Disconnect() end
    
    humanoid.PlatformStand = true
    head.Anchored = true
    
    CFlyLoop = game:GetService("RunService").Heartbeat:Connect(function(deltaTime)
        if not character or not humanoid or not head then return end
        
        local moveDirection = humanoid.MoveDirection * (CFlySpeed * deltaTime)
        local headCF = head.CFrame
        local cameraCF = workspace.CurrentCamera.CFrame
        
        -- Calculate the camera offset relative to the head
        local cameraOffset = headCF:ToObjectSpace(cameraCF).Position
        
        -- Correcting the camera position
        cameraCF = cameraCF * CFrame.new(-cameraOffset.X, -cameraOffset.Y, -cameraOffset.Z + 1)
        
        -- Get camera and head positions
        local cameraPos = cameraCF.Position
        local headPos = headCF.Position
        
        -- Calculate the new position of the head
        local lookCF = CFrame.new(cameraPos, Vector3.new(headPos.X, cameraPos.Y, headPos.Z))
        local objectSpaceVelocity = lookCF:VectorToObjectSpace(moveDirection)
        
        -- Applying a new position
        head.CFrame = CFrame.new(headPos) * (cameraCF - cameraPos) * CFrame.new(objectSpaceVelocity)
    end)
end

-- CFly off function
local function DisableCFly()
    if CFlyLoop then
        CFlyLoop:Disconnect()
        CFlyLoop = nil
    end
    
    if humanoid then
        humanoid.PlatformStand = false
    end
    
    if head then
        head.Anchored = false
    end
end

-- Automatic shutdown on death
player.CharacterAdded:Connect(function(newChar)
    character = newChar
    humanoid = newChar:WaitForChild("Humanoid")
    head = newChar:WaitForChild("Head")
    
    if CFlyEnabled then
        DisableCFly()
        EnableCFly() -- Restart CFly
    end
end)

-- Section for CFly
local CFlySection = PlayerTab:DrawSection({
    Name = "Camera Fly",
    Position = 'left'
})

-- CFly switch
local CFlyToggle = CFlySection:AddToggle({
    Name = "Enable Camera Fly",
    Flag = "CFly_Toggle",
    Default = false,
    Callback = function(enabled)
        CFlyEnabled = enabled
        
        if enabled then
            EnableCFly()
        else
            DisableCFly()
        end
    end
})

-- CFly speed slider
CFlySection:AddSlider({
    Name = "CFly Speed",
    Min = 10,
    Max = 500,
    Default = 50,
    Round = 0,
    Flag = "CFly_Speed",
    Callback = function(speed)
        CFlySpeed = speed
    end
})


local PlayerScriptsSection = PlayerTab:DrawSection({
    Name = "Main Scripts",
    Position = "right"
})

-- XRay Toggle
local XRayToggle = PlayerScriptsSection:AddToggle({
    Name = "X-Ray",
    Flag = "XRay_Enabled",
    Default = false,
    Callback = function(state)
        xrayEnabled = state
        xray()
    end
})

-- Fullbright Toggle
local FullbrightToggle = PlayerScriptsSection:AddToggle({
    Name = "Fullbright",
    Flag = "Fullbright_Enabled",
    Default = false,
    Callback = function(state)
        if state then
            Lighting.Brightness = 2
            Lighting.ClockTime = 14
            Lighting.FogEnd = 100000
            Lighting.GlobalShadows = false
            Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128)
        else
            Lighting.Brightness = 1
            Lighting.ClockTime = 14
            Lighting.FogEnd = 1000000
            Lighting.GlobalShadows = true
            Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128)
        end
    end
})

-- Auto Fullbright Toggle
PlayerScriptsSection:AddToggle({
    Name = "Auto Fullbright",
    Flag = "AutoFullbright_Enabled",
    Default = false,
    Callback = function(state)
        if state then
            if brightLoop then brightLoop:Disconnect() end
            
            brightLoop = RunService.RenderStepped:Connect(function()
                Lighting.Brightness = 2
                Lighting.ClockTime = 14
                Lighting.FogEnd = 100000
                Lighting.GlobalShadows = false
                Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128)
                
                -- Automatically turn on Fullbright if it is turned off
                if not FullbrightToggle.Value then
                    FullbrightToggle:Set(true)
                end
            end)
        else
            if brightLoop then
                brightLoop:Disconnect()
                brightLoop = nil
            end
        end
    end
})

-- Character change handler
player.CharacterAdded:Connect(function(character)
    if xrayEnabled then
        xray()
    end
end)


-- Services
local Players = game:GetService("Players")
local GuiService = game:GetService("GuiService")
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")
local TeleportService = game:GetService("TeleportService")
local speaker = Players.LocalPlayer

-- Variables
local Noclipping, Clip
local partHighlights = {}
local espTransparency = 0.5
local autoRejoinConnection
local antiAfkEnabled = false
local antiLagEnabled = false

-- Notification function
local function notify(title, text)
    Compkiller.newNotify().new({
        Title = title,
        Content = text,
        Duration = 3
    })
end

-- Part ESP Functions
local function createHighlight(part)
    local highlight = Instance.new("BoxHandleAdornment")
    highlight.Name = "PART_HIGHLIGHT_"..part.Name
    highlight.Parent = part
    highlight.Adornee = part
    highlight.AlwaysOnTop = true
    highlight.ZIndex = 0
    highlight.Size = part.Size
    highlight.Transparency = espTransparency
    highlight.Color = BrickColor.new("Lime green")
    return highlight
end

local function highlightPart(partName)
    partName = partName:lower()
    local found = false
    
    -- Remove the old backlight if there is one
    if partHighlights[partName] then
        for _, part in pairs(partHighlights[partName].parts) do
            if part and part.Parent then
                local highlight = part:FindFirstChild("PART_HIGHLIGHT_"..part.Name)
                if highlight then
                    highlight:Destroy()
                end
            end
        end
        if partHighlights[partName].connection then
            partHighlights[partName].connection:Disconnect()
        end
        partHighlights[partName] = nil
        notify("Part ESP", "Removed from "..partName)
        return
    end
    
    -- Adding new lighting
    partHighlights[partName] = {parts = {}, connection = nil}
    
    -- Highlighting existing parts
    for _, part in pairs(workspace:GetDescendants()) do
        if part:IsA("BasePart") and part.Name:lower() == partName then
            table.insert(partHighlights[partName].parts, part)
            createHighlight(part)
            found = true
        end
    end
    
    -- Subscribe to new parts
    partHighlights[partName].connection = workspace.DescendantAdded:Connect(function(child)
        if child:IsA("BasePart") and child.Name:lower() == partName then
            table.insert(partHighlights[partName].parts, child)
            createHighlight(child)
        end
    end)
    
    if found then
        notify("Part ESP", "Highlighted "..partName)
    else
        notify("Part ESP", "No parts found")
    end
end

local function clearAllHighlights()
    for partName, data in pairs(partHighlights) do
        for _, part in pairs(data.parts) do
            if part and part.Parent then
                local highlight = part:FindFirstChild("PART_HIGHLIGHT_"..part.Name)
                if highlight then
                    highlight:Destroy()
                end
            end
        end
        if data.connection then
            data.connection:Disconnect()
        end
    end
    partHighlights = {}
    notify("Part ESP", "All highlights cleared")
end

-- Utility Section
local UtilitySection = PlayerTab:DrawSection({
    Name = "Utility",
    Position = "left"
})

UtilitySection:AddButton({
    Name = "Copy Server Link",
    Callback = function()
        setclipboard("roblox://placeId="..game.PlaceId.."&gameInstanceId="..game.JobId)
        notify("Server Link", "Copied to clipboard!")
    end
})

UtilitySection:AddToggle({
    Name = "Auto Rejoin",
    Flag = "AutoRejoin",
    Default = false,
    Callback = function(state)
        if state then
            if autoRejoinConnection then
                autoRejoinConnection:Disconnect()
            end
            autoRejoinConnection = GuiService.ErrorMessageChanged:Connect(function()
                TeleportService:Teleport(game.PlaceId)
            end)
            notify("Auto Rejoin", "Enabled")
        else
            if autoRejoinConnection then
                autoRejoinConnection:Disconnect()
                autoRejoinConnection = nil
            end
            notify("Auto Rejoin", "Disabled")
        end
    end
})

UtilitySection:AddToggle({
    Name = "Anti-AFK",
    Flag = "AntiAFK",
    Default = false,
    Callback = function(state)
        antiAfkEnabled = state
        if state then
            local GC = getconnections or get_signal_cons
            if GC then
                for i,v in pairs(GC(Players.LocalPlayer.Idled)) do
                    if v["Disable"] then
                        v["Disable"](v)
                    elseif v["Disconnect"] then
                        v["Disconnect"](v)
                    end
                end
            else
                local VirtualUser = game:GetService("VirtualUser")
                Players.LocalPlayer.Idled:Connect(function()
                    VirtualUser:CaptureController()
                    VirtualUser:ClickButton2(Vector2.new())
                end)
            end
            notify('Anti-AFK', 'Enabled')
        else
            notify('Anti-AFK', 'Disabled')
        end
    end
})

-- Visual Section
local VisualSection = PlayerTab:DrawSection({
    Name = "Visual",
    Position = "left"
})

VisualSection:AddTextBox({
    Name = "Highlight Part",
    Placeholder = "Enter part name",
    Callback = highlightPart
})

VisualSection:AddButton({
    Name = "Clear Highlights",
    Callback = clearAllHighlights
})

VisualSection:AddSlider({
    Name = "Highlight Transparency",
    Min = 0,
    Max = 1,
    Default = 0.5,
    Increment = 0.1,
    Callback = function(value)
        espTransparency = value
        for _, data in pairs(partHighlights) do
            for _, part in pairs(data.parts) do
                local highlight = part:FindFirstChild("PART_HIGHLIGHT_"..part.Name)
                if highlight then
                    highlight.Transparency = value
                end
            end
        end
    end
})

-- Teleport Section
local TPSection = PlayerTab:DrawSection({
    Name = "Teleport",
    Position = "left"
})

local playerList = {}
local selectedPlayer = ""
local tpDistance = 5

local function updatePlayerList()
    playerList = {}
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer then
            table.insert(playerList, player.Name)
        end
    end
end

updatePlayerList()

TPSection:AddDropdown({
    Name = "Select Player",
    Default = "",
    Values = playerList,
    Callback = function(value)
        selectedPlayer = value
    end
})

TPSection:AddSlider({
    Name = "TP Distance",
    Min = 0,
    Max = 20,
    Default = 5,
    Round = 0,
    Callback = function(value)
        tpDistance = value
    end
})

TPSection:AddButton({
    Name = "Teleport To Player",
    Callback = function()
        if selectedPlayer == "" then
            notify("Teleport", "Select a player first!")
            return
        end
        
        local target = Players:FindFirstChild(selectedPlayer)
        if not target or not target.Character or not target.Character:FindFirstChild("HumanoidRootPart") then
            notify("Teleport", "Target player not found!")
            return
        end
        
        local char = speaker.Character
        if not char or not char:FindFirstChild("HumanoidRootPart") then
            notify("Teleport", "Your character not found!")
            return
        end
        
        char.HumanoidRootPart.CFrame = target.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, -tpDistance)
        notify("Teleport", "Teleported to "..selectedPlayer)
    end
})

TPSection:AddButton({
    Name = "Refresh Player List",
    Callback = function()
        updatePlayerList()
        notify("Player List", "Refreshed")
    end
})

-- Update player list automatically
Players.PlayerAdded:Connect(function(player)
    table.insert(playerList, player.Name)
end)

Players.PlayerRemoving:Connect(function(player)
    for i, name in ipairs(playerList) do
        if name == player.Name then
            table.remove(playerList, i)
            break
        end
    end
end)

PlayerScriptsSection:AddToggle({
    Name = "Anti-Lag",
    Flag = "AntiLag",
    Default = false,
    Callback = function(state)
        antiLagEnabled = state
        if state then
            local Terrain = workspace:FindFirstChildOfClass('Terrain')
            Terrain.WaterWaveSize = 0
            Terrain.WaterWaveSpeed = 0
            Terrain.WaterReflectance = 0
            Terrain.WaterTransparency = 1
            
            Lighting.GlobalShadows = false
            Lighting.FogEnd = 9e9
            Lighting.FogStart = 9e9
            settings().Rendering.QualityLevel = 1
            
            for _,v in pairs(game:GetDescendants()) do
                if v:IsA("BasePart") then
                    v.Material = "Plastic"
                    v.Reflectance = 0
                    for _, surface in pairs({"Back", "Bottom", "Front", "Left", "Right", "Top"}) do
                        v[surface.."Surface"] = "SmoothNoOutlines"
                    end
                elseif v:IsA("Decal") then
                    v.Transparency = 1
                elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
                    v.Lifetime = NumberRange.new(0)
                end
            end
            
            for _,v in pairs(Lighting:GetDescendants()) do
                if v:IsA("PostEffect") then
                    v.Enabled = false
                end
            end
            
            workspace.DescendantAdded:Connect(function(child)
                if child:IsA('ForceField') or child:IsA('Sparkles') or child:IsA('Smoke') or child:IsA('Fire') or child:IsA('Beam') then
                    task.wait()
                    child:Destroy()
                end
            end)
            
            notify("Anti-Lag", "Enabled")
        else
            notify("Anti-Lag", "Restart game to disable")
        end
    end
})

PlayerScriptsSection:AddToggle({
    Name = "Noclip",
    Flag = "NoclipToggle",
    Default = false,
    Callback = function(state)
        if state then
            Clip = false
            local function NoclipLoop()
                if Clip == false and speaker.Character ~= nil then
                    for _, child in pairs(speaker.Character:GetDescendants()) do
                        if child:IsA("BasePart") and child.CanCollide == true then
                            child.CanCollide = false
                        end
                    end
                end
            end
            Noclipping = RunService.Stepped:Connect(NoclipLoop)
            notify('Noclip', 'Enabled')
        else
            if noclipping then
                Noclipping:Disconnect()
                Noclipping = nil
            end
            Clip = true
            notify('Noclip', 'Disabled')
        end
    end
})

PlayerScriptsSection:AddButton({
    Name = "Runs the required scripts",
    Description = "Runs a couple of scripts needed for the game",
    Callback = function()
        Functions.LoadScript("https://raw.githubusercontent.com/1Qlua-RBXscript/1qlua/refs/heads/main/ALLSCRIPTRUN")
    end
})

PlayerScriptsSection:AddButton({
    Name = "Infinite Yield",
    Description = "Powerful admin commands to manage the game",
    Callback = function()
        Functions.LoadScript("https://raw.githubusercontent.com/Infinite-Store/Infinite-Store/main/main.lua")
    end
})

PlayerScriptsSection:AddButton({
    Name = "f3x",
    Description = "Cool cube",
    Callback = function()
        Functions.LoadScript("https://raw.githubusercontent.com/infyiff/backup/refs/heads/main/f3x.lua")
    end
})

PlayerScriptsSection:AddButton({
    Name = "DEX Explorer",
    Description = "Tool for exploring game objects",
    Callback = function()
        Functions.LoadScript("https://raw.githubusercontent.com/infyiff/backup/main/dex.lua")
    end
})

PlayerScriptsSection:AddButton({
    Name = "DEX++",
    Description = "Tool for exploring game objects",
    Callback = function()
        Functions.LoadScript("https://raw.githubusercontent.com/ltseverydayyou/uuuuuuu/refs/heads/main/DexPlusBackup.luau")
    end
})

PlayerScriptsSection:AddButton({
    Name = "Flight (F)",
    Description = "Turn on flight mode by pressing F",
    Callback = function()
        loadstring("\108\111\97\100\115\116\114\105\110\103\40\103\97\109\101\58\72\116\116\112\7 1\101\116\40\40\39\104\116\116\112\115\58\47\47\103\105\115\116\46\103\105\116\104\117\98 \117\115\101\114\99\111\110\116\101\110\116\46\99\111\109\47\109\101\111\122\111\110\101\89\84\47\98\102\48\51\55\100\102\102\57\102\48\97\55\48\48\49\55\51\48\52\100\100\100\54\5 5\102\100\99\100\51\55\48\47\114\97\119\47\101\49\52\101\55\52\102\52\50\53\98\48\54\48\100\102\53\50\51\51\52\51\99\102\51\48\98\55\56\55\48\55\52\101\98\51\99\53\100\50\47\97\11 4\99\101\117\115\37\50\53\50\48\120\37\50\53\50\48\102\108\121\37\50\53\50\48\50\37\50\53\50\48\111\98\102\108\117\99\97\116\111\114\39\41\44\116\114\117\101\41\41\40\41\10\10")()
    end
})

PlayerScriptsSection:AddButton({
    Name = "Invisibility (E)",
    Description = "Makes your character invisible",
    Callback = function()
        Functions.LoadScript("https://pastebin.com/raw/VtWhnEnm")
    end
})

PlayerScriptsSection:AddButton({
    Name = "TP to players",
    Description = "Teleport to other players",
    Callback = function()
        Functions.LoadScript("https://pastebin.com/raw/z4HARAHs")
    end
})

PlayerScriptsSection:AddButton({
    Name = "Play with a dick",
    Description = "Adds animation for fun",
    Callback = function()
        Functions.LoadScript("https://pastebin.com/raw/73RsNXY2")
    end
})

PlayerScriptsSection:AddButton({
    Name = "Remove Walls",
    Description = "Removes obstacles in the game",
    Callback = function()
        Functions.LoadScript("https://pastebin.com/raw/FBKJTUyw")
    end
})

PlayerScriptsSection:AddButton({
    Name = "Fall on the spot (R)",
    Description = "The character falls on the spot without moving",
    Callback = function()
        Functions.LoadScript("https://pastebin.com/raw/CTUaCKN1")
    end
})

PlayerScriptsSection:AddButton({
    Name = "Free Camera (Shift+P)",
    Description = "Disables camera binding to character",
    Callback = function()
        Functions.LoadScript("https://pastebin.com/raw/ct8Kq5F0")
    end
})

PlayerScriptsSection:AddButton({
    Name = "Flying by car (V)",
    Description = "Allows transport to fly",
    Callback = function()
        Functions.LoadScript("https://pastebin.com/raw/9bNj1EcR")
    end
})

PlayerScriptsSection:AddButton({
    Name = "Add all as friends",
    Description = "Automatically sends friend requests",
    Callback = function()
        local plrs = game:GetService('Players')
        for i,v in pairs(plrs:GetChildren()) do
            task.wait(1)
            plrs.LocalPlayer:RequestFriendship(v)
        end
    end
})

PlayerScriptsSection:AddButton({
    Name = "Checkpoints",
    Description = "Creates points for quick teleportation",
    Callback = function()
        Functions.LoadScript("https://pastebin.com/raw/rz7uUmED")
    end
})

PlayerScriptsSection:AddButton({
    Name = "Voice Chat Bypass",
    Description = "Allows you to bypass voice chat restrictions",
    Callback = function()
        Functions.LoadScript("https://raw.githubusercontent.com/CorpseCMD/MyScripts/main/VoicechatBypass.lua")
    end
})

PlayerScriptsSection:AddButton({
    Name = "Shaders",
    Description = "Improves the game's visual effects",
    Callback = function()
        Functions.LoadScript("https://pastebin.com/raw/1XA5qM3D")
    end
})

PlayerScriptsSection:AddButton({
    Name = "Sigma Spy",
    Description = "Monitoring game events",
    Callback = function()
        Functions.LoadScript("https://raw.githubusercontent.com/depthso/Sigma-Spy/main/Main.lua")
    end
})

PlayerScriptsSection:AddButton({
    Name = "English version",
    Description = "Switch to English version",
    Callback = function()
        Functions.LoadScript("https://pastebin.com/raw/32k6f2Ns")
    end
})

PlayerScriptsSection:AddButton({
    Name = "Team Administrator from 1qlua",
    Description = "A set of administrative commands",
    Callback = function()
        Functions.LoadScript("https://pastebin.com/raw/t3chuwNu")
    end
})

PlayerScriptsSection:AddButton({
    Name = "Injector test",
    Description = "Check your injector",
    Callback = function()
        Functions.LoadScript("https://rawscripts.net/raw/Universal-Script-UNChecker-GUI-Version-27355")
    end
})

PlayerScriptsSection:AddButton({
    Name = "Change server",
    Description = "Quickly change server",
    Callback = function()
        Functions.LoadScript("https://raw.githubusercontent.com/Syr0nix/RedFoxServerBowser/main/Mainlua")
    end
})

-- ESP Functions
local function CreateESP(player, teamCheck)
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    
    local espGui = Instance.new("BillboardGui")
    espGui.Name = player.Name .. "_ESP"
    espGui.AlwaysOnTop = true
    espGui.Size = UDim2.new(2, 0, 2, 0)
    espGui.StudsOffset = Vector3.new(0, 2.5, 0)
    espGui.Adornee = humanoidRootPart
    espGui.Parent = COREGUI
    
    local espFrame = Instance.new("Frame")
    espFrame.BackgroundTransparency = 1
    espFrame.Size = UDim2.new(1, 0, 1, 0)
    espFrame.Parent = espGui
    
    local espText = Instance.new("TextLabel")
    espText.Name = "ESPText"
    espText.BackgroundTransparency = 1
    espText.Size = UDim2.new(1, 0, 1, 0)
    espText.Font = Enum.Font.SourceSansBold
    espText.TextSize = 18
    espText.Text = player.Name
    espText.TextColor3 = teamCheck and player.Team == speaker.Team and Color3.new(0, 1, 0) or Color3.new(1, 0, 0)
    espText.Parent = espFrame
    
    -- Health bar
    local healthBar = Instance.new("Frame")
    healthBar.Name = "HealthBar"
    healthBar.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
    healthBar.BorderSizePixel = 0
    healthBar.Size = UDim2.new(1, 0, 0.1, 0)
    healthBar.Position = UDim2.new(0, 0, 0, -15)
    healthBar.Parent = espFrame
    
    local healthFill = Instance.new("Frame")
    healthFill.Name = "HealthFill"
    healthFill.BackgroundColor3 = Color3.new(0, 1, 0)
    healthFill.BorderSizePixel = 0
    healthFill.Size = UDim2.new(1, 0, 1, 0)
    healthFill.Parent = healthBar
    
    local function updateHealth()
        if character and character:FindFirstChild("Humanoid") then
            local humanoid = character.Humanoid
            healthFill.Size = UDim2.new(humanoid.Health / humanoid.MaxHealth, 0, 1, 0)
            
            -- Change color based on health
            if humanoid.Health / humanoid.MaxHealth < 0.3 then
                healthFill.BackgroundColor3 = Color3.new(1, 0, 0)
            elseif humanoid.Health / humanoid.MaxHealth < 0.6 then
                healthFill.BackgroundColor3 = Color3.new(1, 1, 0)
            else
                healthFill.BackgroundColor3 = Color3.new(0, 1, 0)
            end
        end
    end
    
    character:WaitForChild("Humanoid").HealthChanged:Connect(updateHealth)
    updateHealth()
    
    -- Box ESP
    local box = Instance.new("Frame")
    box.Name = "Box"
    box.BackgroundTransparency = 0.8
    box.BackgroundColor3 = teamCheck and player.Team == speaker.Team and Color3.new(0, 1, 0) or Color3.new(1, 0, 0)
    box.BorderSizePixel = 1
    box.BorderColor3 = Color3.new(1, 1, 1)
    box.Size = UDim2.new(1.5, 0, 2.5, 0)
    box.Position = UDim2.new(-0.25, 0, -0.5, 0)
    box.Parent = espFrame
    
    -- Tracer
    local tracer = Instance.new("Frame")
    tracer.Name = "Tracer"
    tracer.BackgroundColor3 = teamCheck and player.Team == speaker.Team and Color3.new(0, 1, 0) or Color3.new(1, 0, 0)
    tracer.BorderSizePixel = 0
    tracer.Size = UDim2.new(0, 1, 0, 1000)
    tracer.AnchorPoint = Vector2.new(0.5, 1)
    tracer.Position = UDim2.new(0.5, 0, 1, 0)
    tracer.Parent = espFrame
    
    player.CharacterAdded:Connect(function(newChar)
        espGui.Adornee = newChar:WaitForChild("HumanoidRootPart")
        newChar:WaitForChild("Humanoid").HealthChanged:Connect(updateHealth)
        updateHealth()
    end)
    
    player:GetPropertyChangedSignal("Team"):Connect(function()
        if teamCheck then
            espText.TextColor3 = player.Team == speaker.Team and Color3.new(0, 1, 0) or Color3.new(1, 0, 0)
            box.BackgroundColor3 = player.Team == speaker.Team and Color3.new(0, 1, 0) or Color3.new(1, 0, 0)
            tracer.BackgroundColor3 = player.Team == speaker.Team and Color3.new(0, 1, 0) or Color3.new(1, 0, 0)
        end
    end)
    
    return espgui
end

local function ESP(player, teamCheck)
    if not player.Character then
        player.CharacterAdded:Wait()
    end
    return CreateESP(player, teamCheck)
end

local function ToggleESP(teamCheck)
    if not CHMSenabled then
        ESPenabled = not ESPenabled
        
        if ESPenabled then
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= speaker then
                    ESP(player, teamCheck)
                end
            end
            
            Players.PlayerAdded:Connect(function(player)
                if ESPenabled then
                    ESP(player, teamCheck)
                end
            end)
            
            Notifier.new({
                Title = "ESP",
                Content = "ESP has been enabled" .. (teamCheck and " (Team Check)" or ""),
                Duration = 3,
                Icon = "rbxassetid://120245531583106"
            })
        else
            for _, child in pairs(COREGUI:GetChildren()) do
                if string.sub(child.Name, -4) == "_ESP" then
                    child:Destroy()
                end
            end
            
            Notifier.new({
                Title = "ESP",
                Content = "ESP has been disabled",
                Duration = 3,
                Icon = "rbxassetid://120245531583106"
            })
        end
    else
        Notifier.new({
            Title = "ESP",
            Content = "Disable chams (nochams) before using esp",
            Duration = 3,
            Icon = "rbxassetid://120245531583106"
        })
    end
end



local ESPTab = Window:DrawTab({
    Name = "ESP Settings",
    Icon = "eye",
    EnableScrolling = true
})

local ESSettings = ESPTab:DrawSection({
    Name = "ESP Settings",
    Position = 'left'
})

-- ESP Toggles
ESSettings:AddToggle({
    Name = "Enable ESP",
    Flag = "ESP_Enabled",
    Default = false,
    Callback = function(state)
        if state then
            ToggleESP(false)
        else
            ToggleESP(false)
        end
    end
})

ESSettings:AddToggle({
    Name = "Team Check",
    Flag = "ESP_TeamCheck",
    Default = false,
    Callback = function(state)
        if ESPenabled then
            -- Refresh ESP with new team check setting
            ToggleESP(false) -- Turn off
            ToggleESP(state) -- Turn on with new setting
        end
    end
})

ESSettings:AddToggle({
    Name = "Show Names",
    Flag = "ESP_ShowNames",
    Default = true,
    Callback = function(state)
        for _, child in pairs(COREGUI:GetChildren()) do
            if string.sub(child.Name, -4) == "_ESP" then
                local espText = child:FindFirstChild("Frame"):FindFirstChild("ESPText")
                if espText then
                    espText.Visible = state
                end
            end
        end
    end
})

ESSettings:AddToggle({
    Name = "Show Health Bar",
    Flag = "ESP_ShowHealth",
    Default = true,
    Callback = function(state)
        for _, child in pairs(COREGUI:GetChildren()) do
            if string.sub(child.Name, -4) == "_ESP" then
                local healthBar = child:FindFirstChild("Frame"):FindFirstChild("HealthBar")
                if healthbar then
                    healthBar.Visible = state
                end
            end
        end
    end
})

ESSettings:AddToggle({
    Name = "Show Box",
    Flag = "ESP_ShowBox",
    Default = true,
    Callback = function(state)
        for _, child in pairs(COREGUI:GetChildren()) do
            if string.sub(child.Name, -4) == "_ESP" then
                local box = child:FindFirstChild("Frame"):FindFirstChild("Box")
                if box then
                    box.Visible = state
                end
            end
        end
    end
})

ESSettings:AddToggle({
    Name = "Show Tracer",
    Flag = "ESP_ShowTracer",
    Default = true,
    Callback = function(state)
        for _, child in pairs(COREGUI:GetChildren()) do
            if string.sub(child.Name, -4) == "_ESP" then
                local tracer = child:FindFirstChild("Frame"):FindFirstChild("Tracer")
                if tracer then
                    tracer.Visible = state
                end
            end
        end
    end
})

-- ESP Colors
local ESPColors = ESPTab:DrawSection({
    Name = "ESP Colors",
    Position = 'right'
})

ESPColors:AddColorPicker({
    Name = "Enemy Color",
    Flag = "ESP_EnemyColor",
    Default = Color3.fromRGB(255, 0, 0),
    Callback = function(color)
        if not ESPenabled or not ConfigManager:GetValue("ESP_TeamCheck") then return end
        
        for _, child in pairs(COREGUI:GetChildren()) do
            if string.sub(child.Name, -4) == "_ESP" then
                local playerName = string.sub(child.Name, 1, -5)
                local player = Players:FindFirstChild(playerName)
                
                if player and player.Team ~= speaker.Team then
                    local frame = child:FindFirstChild("Frame")
                    if frame then
                        local espText = frame:FindFirstChild("ESPText")
                        local box = frame:FindFirstChild("Box")
                        local tracer = frame:FindFirstChild("Tracer")
                        
                        if espText then espText.TextColor3 = color end
                        if box then box.BackgroundColor3 = color end
                        if tracer then tracer.BackgroundColor3 = color end
                    end
                end
            end
        end
    end
})

ESPColors:AddColorPicker({
    Name = "TeamColor",
    Flag = "ESP_TeamColor",
    Default = Color3.fromRGB(0, 255, 0),
    Callback = function(color)
        if not ESPenabled or not ConfigManager:GetValue("ESP_TeamCheck") then return end
        
        for _, child in pairs(COREGUI:GetChildren()) do
            if string.sub(child.Name, -4) == "_ESP" then
                local playerName = string.sub(child.Name, 1, -5)
                local player = Players:FindFirstChild(playerName)
                
                if player and player.Team == speaker.Team then
                    local frame = child:FindFirstChild("Frame")
                    if frame then
                        local espText = frame:FindFirstChild("ESPText")
                        local box = frame:FindFirstChild("Box")
                        local tracer = frame:FindFirstChild("Tracer")
                        
                        if espText then espText.TextColor3 = color end
                        if box then box.BackgroundColor3 = color end
                        if tracer then tracer.BackgroundColor3 = color end
                    end
                end
            end
        end
    end
})

ESPColors:AddColorPicker({
    Name = "Text Color",
    Flag = "ESP_TextColor",
    Default = Color3.fromRGB(255, 255, 255),
    Callback = function(color)
        if not ESPenabled then return end
        
        for _, child in pairs(COREGUI:GetChildren()) do
            if string.sub(child.Name, -4) == "_ESP" then
                local frame = child:FindFirstChild("Frame")
                if frame then
                    local espText = frame:FindFirstChild("ESPText")
                    if espText then
                        espText.TextColor3 = color
                    end
                end
            end
        end
    end
})

-- Text Settings
local TextSettings = ESPTab:DrawSection({
    Name = "Text Settings",
    Position = 'right'
})

TextSettings:AddSlider({
    Name = "Text Size",
    Min = 10,
    Max = 30,
    Default = 18,
    Round = 0,
    Flag = "ESP_TextSize",
    Callback = function(value)
        if not ESPenabled then return end
        
        for _, child in pairs(COREGUI:GetChildren()) do
            if string.sub(child.Name, -4) == "_ESP" then
                local frame = child:FindFirstChild("Frame")
                if frame then
                    local espText = frame:FindFirstChild("ESPText")
                    if espText then
                        espText.TextSize = value
                    end
                end
            end
        end
    end
})

TextSettings:AddDropdown({
    Name = "Text Font",
    Default = "SourceSansBold",
    Flag = "ESP_TextFont",
    Values = {"SourceSans", "SourceSansBold", "SourceSansItalic", "Code", "Highway", "SciFi", "Arcade", "Fantasy"},
    Callback = function(value)
        if not ESPenabled then return end
        
        local fontMap = {
            SourceSans = Enum.Font.SourceSans,
            SourceSansBold = Enum.Font.SourceSansBold,
            SourceSansItalic = Enum.Font.SourceSansItalic,
            Code = Enum.Font.Code,
            Highway = Enum.Font.Highway,
            SciFi = Enum.Font.SciFi,
            Arcade = Enum.Font.Arcade,
            Fantasy = Enum.Font.Fantasy
        }
        
        for _, child in pairs(COREGUI:GetChildren()) do
            if string.sub(child.Name, -4) == "_ESP" then
                local frame = child:FindFirstChild("Frame")
                if frame then
                    local espText = frame:FindFirstChild("ESPText")
                    if espText then
                        espText.Font = fontMap[value]
                    end
                end
            end
        end
    end
})

-- Create a Fling tab
local FlingTab = Window:DrawTab({
    Name = "Fling",
    Icon = "target",
    EnableScrolling = true
})

-- Section for regular fling
local FlingSection = FlingTab:DrawSection({
    Name = "Main Fling",
    Position = 'left'
})

-- Variables for control
local flinging = false
local walkflinging = false
local antifling = nil
local flingDied = nil

-- Fling function
local function enableFling()
    if flinging then return end
    
    flinging = true
    for _, child in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
        if child:IsA("BasePart") then
            child.CustomPhysicalProperties = PhysicalProperties.new(100, 0.3, 0.5)
        end
    end
    
    game:GetService("RunService").Stepped:Connect(function()
        if not floating then return end
        game.Players.LocalPlayer.Character.Humanoid:ChangeState(11)
    end)
    
    wait(.1)
    local bambam = Instance.new("BodyAngularVelocity")
    bambam.Name = "FlingVelocity"
    bambam.Parent = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    bambam.AngularVelocity = Vector3.new(0.99999.0)
    bambam.MaxTorque = Vector3.new(0,math.huge,0)
    bambam.P = math.huge
    
    for i, v in next, game.Players.LocalPlayer.Character:GetChildren() do
        if v:IsA("BasePart") then
            v.CanCollide = false
            v.Massless = true
            v.Velocity = Vector3.new(0, 0, 0)
        end
    end
    
    local function flingDiedF()
        disableFling()
    end
    
    flingDied = game.Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').Died:Connect(flingDiedF)
    
    while flinging do
        bambam.AngularVelocity = Vector3.new(0.99999.0)
        wait(.2)
        bambam.AngularVelocity = Vector3.new(0,0,0)
        wait(.1)
    end
end

-- Fling off function
local function disableFling()
    if not floating then return end
    
    if flingDied then
        flingDied:Disconnect()
    end
    
    flinging = false
    wait(.1)
    
    local speakerChar = game.Players.LocalPlayer.Character
    if not speakerChar or not speakerChar:FindFirstChild("HumanoidRootPart") then return end
    
    for i,v in pairs(speakerChar.HumanoidRootPart:GetChildren()) do
        if v.ClassName == 'BodyAngularVelocity' then
            v:Destroy()
        end
    end
    
    for _, child in pairs(speakerChar:GetDescendants()) do
        if child:IsA("BasePart") then
            child.CustomPhysicalProperties = PhysicalProperties.new(0.7, 0.3, 0.5)
        end
    end
end

-- Walkfling function
local function enableWalkFling()
    if walkflinging then return end
    
    walkflinging = true
    local RunService = game:GetService("RunService")
    
    local humanoid = game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid")
    if humanoid then
        humanoid.Died:Connect(function()
            disableWalkFling()
        end)
    end
    
    while walkingflinging do
        RunService.Heartbeat:Wait()
        local character = game.Players.LocalPlayer.Character
        local root = character and character:FindFirstChild("HumanoidRootPart")
        local vel, movel = nil, 0.1

        while not (character and character.Parent and root and root.Parent) do
            RunService.Heartbeat:Wait()
            character = game.Players.LocalPlayer.Character
            root = character and character:FindFirstChild("HumanoidRootPart")
        end

        vel = root.Velocity
        root.Velocity = vel * 10000 + Vector3.new(0, 10000, 0)

        RunService.RenderStepped:Wait()
        if character and character.Parent and root and root.Parent then
            root.Velocity = vel
        end

        RunService.Stepped:Wait()
        if character and character.Parent and root and root.Parent then
            root.Velocity = vel + Vector3.new(0, movel, 0)
            movel = movel * -1
        end
    end
end

-- Walkfling off function
local function disableWalkFling()
    walkflinging = false
end

-- Antifling function
local function enableAntiFling()
    if antifling then
        antifling:Disconnect()
        antifling = nil
    end
    
    antifling = game:GetService("RunService").Stepped:Connect(function()
        for _, player in pairs(game:GetService("Players"):GetPlayers()) do
            if player ~= game.Players.LocalPlayer and player.Character then
                for _, v in pairs(player.Character:GetDescendants()) do
                    if v:IsA("BasePart") then
                        v.CanCollide = false
                    end
                end
            end
        end
    end)
end

-- Antifling off function
local function disableAntiFling()
    if antifling then
        antifling:Disconnect()
        antifling = nil
    end
end

-- Adding elements to the UI
FlingSection:AddToggle({
    Name = "Fling",
    Flag = "Fling_Toggle",
    Default = false,
    Callback = function(state)
        if state then
            enableFling()
        else
            disableFling()
        end
    end
})

FlingSection:AddToggle({
    Name = "WalkFling",
    Flag = "WalkFling_Toggle",
    Default = false,
    Callback = function(state)
        if state then
            enableWalkFling()
        else
            disableWalkFling()
        end
    end
})

FlingSection:AddToggle({
    Name = "AntiFling",
    Flag = "AntiFling_Toggle",
    Default = false,
    Callback = function(state)
        if state then
            enableAntiFling()
        else
            disableAntiFling()
        end
    end
})

-- Section for fling settings
local FlingSettings = FlingTab:DrawSection({
    Name = "Fling Settings",
    Position = 'right'
})

FlingSettings:AddSlider({
    Name = "Fling Power",
    Min = 1000,
    Max = 99999,
    Default = 99999,
    Round = 0,
    Flag = "Fling_Power",
    Callback = function(value)
        -- You can add logic for changing the fling's strength
    end
})

FlingSettings:AddDropdown({
    Name = "Fling Type",
    Default = "Normal",
    Values = {"Normal", "Reverse", "Chaos"},
    Callback = function(value)
        -- Different types of fling can be added
    end
})

FlingSettings:AddButton({
    Name = "Reset Character",
    Callback = function()
        game.Players.LocalPlayer.Character:BreakJoints()
    end
})

-- Automatic shutdown on death
game.Players.LocalPlayer.CharacterAdded:Connect(function(character)
    character:WaitForChild("Humanoid").Died:Connect(function()
        disableFling()
        disableWalkFling()
    end)
end)

-- Create Camera Tab
local CameraTab = Window:DrawTab({
    Name = "Camera",
    Icon = "camera",
    EnableScrolling = true
})

-- Spectate Section
local SpectateSection = CameraTab:DrawSection({
    Name = "Spectate",
    Position = 'left'
})

-- Player List Dropdown
local playerDropdown = SpectateSection:AddDropdown({
    Name = "Player List",
    Default = "Select Player",
    Values = {"Select Player"},
    Callback = function(selectedPlayer)
        if selectedPlayer ~= "Select Player" then
            StopFreecam()
            local player = Players:FindFirstChild(selectedPlayer)
            if player then
                if view then
                    viewDied:Disconnect()
                    viewChanged:Disconnect()
                end
                viewing = player
                workspace.CurrentCamera.CameraSubject = player.Character
                notify('Spectate', 'Viewing ' .. player.Name)
                
                local function viewDiedFunc()
                    repeat wait() until player.Character ~= nil and getRoot(player.Character)
                    workspace.CurrentCamera.CameraSubject = player.Character
                end
                viewDied = player.CharacterAdded:Connect(viewDiedFunc)
                
                local function viewChangedFunc()
                    workspace.CurrentCamera.CameraSubject = player.Character
                end
                viewChanged = workspace.CurrentCamera:GetPropertyChangedSignal("CameraSubject"):Connect(viewChangedFunc)
            end
        end
    end
})

-- Update player list function
local function updatePlayerList()
    local playerNames = {"Select Player"}
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= speaker then
            table.insert(playerNames, player.Name)
        end
    end
    playerDropdown:SetValues(playerNames)
end

-- Initial update and connect to player added/removed
updatePlayerList()
Players.PlayerAdded:Connect(updatePlayerList)
Players.PlayerRemoving:Connect(updatePlayerList)

-- Unrespected
SpectateSection:AddButton({
    Name = "Unspectate",
    Callback = function()
        StopFreecam()
        if viewing ~= nil then
            viewing = nil
            notify('Spectate', 'View turned off')
        end
        if view then
            viewDied:Disconnect()
            viewChanged:Disconnect()
        end
        workspace.CurrentCamera.CameraSubject = speaker.Character
        playerDropdown:SetValue("Select Player")
    end
})

-- View Part Section
local ViewPartSection = CameraTab:DrawSection({
    Name = "View Parts",
    Position = 'right'
})

-- View Part by Name
ViewPartSection:AddTextBox({
    Name = "View Part",
    Placeholder = "Part Name",
    Callback = function(name)
        StopFreecam()
        if name then
            for _, v in pairs(workspace:GetDescendants()) do
                if v.Name:lower() == name:lower() and v:IsA("BasePart") then
                    wait(0.1)
                    workspace.CurrentCamera.CameraSubject = v
                    notify('View Part', 'Viewing ' .. v.Name)
                    break
                end
            end
        end
    end
})

-- Return Camera to Player
ViewPartSection:AddButton({
    Name = "Return to Player",
    Callback = function()
        StopFreecam()
        if viewing ~= nil then
            viewing = nil
        end
        if view then
            viewDied:Disconnect()
            viewChanged:Disconnect()
        end
        workspace.CurrentCamera.CameraSubject = speaker.Character
        playerDropdown:SetValue("Select Player")
        notify('Camera', 'Returned to player view')
    end
})

-- Camera Settings Section
local CameraSettingsSection = CameraTab:DrawSection({
    Name = "Camera Settings",
    Position = 'left'
})

-- FOV Slider
CameraSettingsSection:AddSlider({
    Name = "Field of View",
    Min = 1,
    Max = 120,
    Default = 70,
    Round = 0,
    Callback = function(value)
        workspace.CurrentCamera.FieldOfView = value
    end
})

-- Max Zoom Distance
CameraSettingsSection:AddSlider({
    Name = "Max Zoom Distance",
    Min = 1,
    Max = 1000,
    Default = 400,
    Round = 0,
    Callback = function(value)
        speaker.CameraMaxZoomDistance = value
    end
})

-- Fix Camera
CameraSettingsSection:AddButton({
    Name = "Fix Camera",
    Callback = function()
        StopFreecam()
        viewing = nil
        if view then
            viewDied:Disconnect()
            viewChanged:Disconnect()
        end
        workspace.CurrentCamera:remove()
        wait(.1)
        repeat wait() until speaker.Character ~= nil
        workspace.CurrentCamera.CameraSubject = speaker.Character:FindFirstChildWhichIsA('Humanoid')
        workspace.CurrentCamera.CameraType = "Custom"
        speaker.CameraMinZoomDistance = 0.5
        speaker.CameraMaxZoomDistance = 400
        speaker.CameraMode = "Classic"
        if speaker.Character and speaker.Character:FindFirstChild("Head") then
            speaker.Character.Head.Anchored = false
        end
        playerDropdown:SetValue("Select Player")
        notify('Camera', 'Camera fixed')
    end
})

-- Shift Lock
CameraSettingsSection:AddButton({
    Name = "Enable Shift Lock",
    Callback = function()
        speaker.DevEnableMouseLock = true
        notify('Shiftlock', 'Shift lock is now available')
    end
})


-- Slap Battles Tab
local SlapBattlesTab = Window:DrawTab({
    Name = "Slap Battles",
    Icon = "hand",
    EnableScrolling = true
})

local SlapBattlesSection = SlapBattlesTab:DrawSection({
    Name = "Exclusive Scripts",
    Position = "left"
})

SlapBattlesSection:AddButton({
    Name = "Hitboxes",
    Description = "Increases the area of effect",
    Callback = function()
        Functions.LoadScript("https://raw.githubusercontent.com/Bilmemi/hitbox2/main/op")
    end
})

SlapBattlesSection:AddButton({
    Name = "Auto-bus",
    Description = "Automatically uses the bus ability",
    Callback = function()
        while task.wait(6) do
            game:GetService("ReplicatedStorage"):WaitForChild("busmoment"):FireServer()
        end
    end
})

SlapBattlesSection:AddButton({
    Name = "Infinite Uno",
    Description = "Permanently activates Uno's ability",
    Callback = function()
        while task.wait(6) do
            game:GetService("ReplicatedStorage"):WaitForChild("ReverseAbility"):FireServer()
        end
    end
})

SlapBattlesSection:AddButton({
    Name = "Aura of Murder",
    Description = "Automatically attack nearby players",
    Callback = function()
        local json = game:HttpGet("https://raw.githubusercontent.com/LeoKholYt/lkhub/main/list.json")
        local jsonData = game:GetService("HttpService"):JSONDecode(json)
        local url = jsonData[tostring(game.PlaceId)] or "universal.lua"
        url = url.s or url
        Functions.LoadScript("https://lkhub.net/s/"..url)
    end
})

-- Lumber Tycoon 2 tab
local LumberTycoonTab = Window:DrawTab({
    Name = "Lumber Tycoon 2",
    Icon = "tree-pine",
    EnableScrolling = true
})

local LumberTycoonSection = LumberTycoonTab:DrawSection({
    Name = "Farm scripts",
    Position = "left"
})

LumberTycoonSection:AddButton({
    Name = "Kron Hub",
    Description = "The best script for automation",
    Callback = function()
        Functions.LoadScript("https://raw.githubusercontent.com/DevKron/Kron_Hub/main/version_1.0")
    end
})

LumberTycoonSection:AddButton({
    Name = "LT2 LuaWare",
    Description = "Optimized script for mobile devices",
    Callback = function()
        Functions.LoadScript("https://raw.githubusercontent.com/frencaliber/LuaWareLoader.lw/main/luawareloader.wtf")
    end
})

LumberTycoonSection:AddButton({
    Name = "LT2 Better Script",
    Description = "Enhanced version for PC",
    Callback = function()
        Functions.LoadScript("https://raw.githubusercontent.com/Butterisgood/Butter/main/Root2.lua")
    end
})

LumberTycoonSection:AddButton({
    Name = "Remove protective walls",
    Description = "Removes protective barriers",
    Callback = function()
        while task.wait() do
            game:GetService("Workspace").Effects:Destroy()
        end
    end
})

-- MM2 Tab
local MM2Tab = Window:DrawTab({
    Name = "Murder Mystery 2",
    Icon = "sword",
    EnableScrolling = true
})

local MM2Section = MM2Tab:DrawSection({
    Name = "Scripts for MM2",
    Position = "left"
})

MM2Section:AddButton({
    Name = "Best MM2 script",
    Description = "Various features for Murder Mystery 2",
    Callback = function()
        Functions.LoadScript("https://raw.githubusercontent.com/FOGOTY/mm2-piano-reborn/main/scr")
    end
})

-- Ohio Tab
local OhioTab = Window:DrawTab({
    Name = "Ohio",
    Icon = "map",
    EnableScrolling = true
})

local OhioSection = OhioTab:DrawSection({
    Name = "Ohio Features",
    Position = "left"
})

OhioSection:AddButton({
    Name = "Players ESP",
    Description = "Shows players through walls",
    Callback = function()
        Functions.LoadScript("https://pastebin.com/raw/r97SAaUa")
    end
})

OhioSection:AddButton({
    Name = "Auto-farm junk V2",
    Description = "Automatically collects resources",
    Callback = function()
        Functions.LoadScript("https://pastebin.com/raw/HNwdknXk")
    end
})

OhioSection:AddButton({
    Name = "ATM Autofarm",
    Description = "Automatic money collection",
    Callback = function()
        Functions.LoadScript("https://pastebin.com/raw/szznrYvx")
    end
})

OhioSection:AddButton({
    Name = "TP by CTRL+Click",
    Description = "Teleport to the click location",
    Callback = function()
        Functions.LoadScript("https://pastebin.com/raw/icB69Hhf")
    end
})

OhioSection:AddButton({
    Name = "TP to places",
    Description = "Fast teleportation across locations",
    Callback = function()
        Functions.LoadScript("https://pastebin.com/raw/nrJ7cVcJ")
    end
})

OhioSection:AddButton({
    Name = "Mini hub",
    Description = "Ohio Script Collection",
    Callback = function()
        Functions.LoadScript("https://pastebin.com/raw/fef2FzGc")
    end
})

OhioSection:AddButton({
    Name = "Script for Ohio",
    Description = "Universal script for Ohio",
    Callback = function()
        Functions.LoadScript("https://pastebin.com/raw/JENqZVm5")
    end
})

-- Kat tab
local KatTab = Window:DrawTab({
    Name = "Kat",
    Icon = "contact",
    EnableScrolling = true
})

local KatSection = KatTab:DrawSection({
    Name = "Functions for Kat",
    Position = "left"
})

KatSection:AddSlider({
    Name = "Movement speed",
    Description = "Character speed setting",
    Min = 0,
    Max = 25,
    Default = 16,
    Callback = function(v) _G.Walk = v end
})

KatSection:AddSlider({
    Name = "Jumping",
    Description = "Jump height adjustment",
    Min = 0,
    Max = 200,
    Default = 50,
    Callback = function(v)
        getgenv().JumpPowerValue = v
        pcall(function()
            local humanoid = Player.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then humanoid.JumpPower = v end
        end)
    end
})

KatSection:AddSlider({
    Name = "Field of view",
    Description = "Adjusting the camera viewing angle",
    Min = 0,
    Max = 120,
    Default = 70,
    Callback = Functions.FOV
})

KatSection:AddButton({
    Name = "Remove Walls",
    Description = "Removes obstacles on the map",
    Callback = function()
        Functions.LoadScript("https://pastebin.com/raw/FBKJTUyw")
    end
})

KatSection:AddButton({
    Name = "Kill Aura",
    Description = "Automatically attack enemies",
    Callback = function()
        Functions.LoadScript("https://pastebin.com/raw/mk1ge1hm")
    end
})

KatSection:AddButton({
    Name = "ESP",
    Description = "See through walls",
    Callback = function()
        Functions.LoadScript("https://pastebin.com/raw/r97SAaUa")
    end
})

KatSection:AddButton({
    Name = "Fall on the spot (R)",
    Description = "Fall without moving",
    Callback = function()
        Functions.LoadScript("https://pastebin.com/raw/CTUaCKN1")
    end
})

-- Jailbreak tab
local JailbreakTab = Window:DrawTab({
    Name = "Jailbreak",
    Icon = "shield",
    EnableScrolling = true
})

local JailbreakSection = JailbreakTab:DrawSection({
    Name = "Jailbreak Features",
    Position = "left"
})

JailbreakSection:AddButton({
    Name = "Avtopharm",
    Description = "Automatic money collection",
    Callback = function()
        Functions.LoadScript("http://scripts.projectauto.xyz/AutoRobV5")
    end
})

JailbreakSection:AddButton({
    Name = "Acceleration",
    Description = "Increase movement speed",
    Callback = function()
        Functions.LoadScript("https://pastebin.com/raw/P8VjFPsQ")
    end
})

JailbreakSection:AddButton({
    Name = "ESP",
    Description = "See through walls",
    Callback = function()
        Functions.LoadScript("https://pastebin.com/raw/r97SAaUa")
    end
})

JailbreakSection:AddButton({
    Name = "TP by CTRL+Click",
    Description = "Teleport to the selected point",
    Callback = function()
        Functions.LoadScript("https://pastebin.com/raw/icB69Hhf")
    end
})

-- A Dusty Trip Tab
local DustyTripTab = Window:DrawTab({
    Name = "A Dusty Trip",
    Icon = "car",
    EnableScrolling = true
})

local DustyTripSection = DustyTripTab:DrawSection({
    Name = "Features for A Dusty Trip",
    Position = "left"
})

DustyTripSection:AddButton({
    Name = "Speed 5000",
    Description = "Extreme movement speed",
    Callback = function()
        _G.Walk = 5000
        _G.WalkSpeed = true
    end
})

DustyTripSection:AddButton({
    Name = "Speed 1000",
    Description = "Very high speed",
    Callback = function()
        _G.Walk = 1000
        _G.WalkSpeed = true
    end
})

DustyTripSection:AddButton({
    Name = "Speed 50",
    Description = "Moderate acceleration",
    Callback = function()
        _G.Walk = 50
        _G.WalkSpeed = true
    end
})

DustyTripSection:AddButton({
    Name = "Speed 25",
    Description = "A little speed up",
    Callback = function()
        _G.Walk = 25
        _G.WalkSpeed = true
    end
})

DustyTripSection:AddButton({
    Name = "Flight by car (V)",
    Description = "Fly on transport",
    Callback = function()
        Functions.LoadScript("https://pastebin.com/raw/9bNj1EcR")
    end
})

-- Build A Boat Tab
local BuildBoatTab = Window:DrawTab({
    Name = "Build A Boat",
    Icon = "sailboat",
    EnableScrolling = true
})

local BuildBoatSection = BuildBoatTab:DrawSection({
    Name = "Functions for Build A Boat",
    Position = "left"
})

BuildBoatSection:AddButton({
    Name = "Avtopharm",
    Description = "Automatic resource collection",
    Callback = function()
        Functions.LoadScript("https://pastebin.com/raw/24e7Skmv")
    end
})

BuildBoatSection:AddButton({
    Name = "Hub Script",
    Description = "Password: N-314159",
    Callback = function()
        Functions.LoadScript("https://raw.githubusercontent.com/novakoolhub/Scripts/main/Scripts/NovBoatR1")
    end
})

BuildBoatSection:AddButton({
    Name = "Flight (F)",
    Description = "Activate the ability to fly",
    Callback = function()
        loadstring("\108\111\97\100\115\116\114\105\110\103\40\103\97\109\101\58\72\116\116\112\7 1\101\116\40\40\39\104\116\116\112\115\58\47\47\103\105\115\116\46\103\105\116\104\117\98 \117\115\101\114\99\111\110\116\101\110\116\46\99\111\109\47\109\101\111\122\111\110\101\89\84\47\98\102\48\51\55\100\102\102\57\102\48\97\55\48\48\49\55\51\48\52\100\100\100\54\5 5\102\100\99\100\51\55\48\47\114\97\119\47\101\49\52\101\55\52\102\52\50\53\98\48\54\48\100\102\53\50\51\51\52\51\99\102\51\48\98\55\56\55\48\55\52\101\98\51\99\53\100\50\47\97\11 4\99\101\117\115\37\50\53\50\48\120\37\50\53\50\48\102\108\121\37\50\53\50\48\50\37\50\53\50\48\111\98\102\108\117\99\97\116\111\114\39\41\44\116\114\117\101\41\41\40\41\10\10")()
    end
})

-- Grow a Garden Tab
local GrowGardenTab = Window:DrawTab({
    Name = "Grow a Garden",
    Icon = "flower",
    EnableScrolling = true
})

local GrowGardenSection = GrowGardenTab:DrawSection({
    Name = "Grow a Garden Features",
    Position = "left"
})

GrowGardenSection:AddButton({
    Name = "Avtopharm",
    Description = "Automatic plant collection",
    Callback = function()
        Functions.LoadScript("https://pastebin.com/raw/UZU3cmQZ")
    end
})

GrowGardenSection:AddButton({
    Name = "Script Hub",
    Description = "Collection of functions for the game",
    Callback = function()
        Functions.LoadScript("https://raw.githubusercontent.com/ameicaa1/Grow-a-Garden/main/Grow_A_Garden.lua")
    end
})

GrowGardenSection:AddButton({
    Name = "Acceleration",
    Description = "Increase movement speed",
    Callback = function()
        Functions.LoadScript("https://pastebin.com/raw/Zzqq3U0u")
    end
})

-- Dig to Earth's CORE tab
local DigToCoreTab = Window:DrawTab({
    Name = "Dig to Earth's CORE",
    Icon = "shovel",
    EnableScrolling = true
})

local DigToCoreSection = DigToCoreTab:DrawSection({
    Name = "Functions for Dig to Earth's CORE",
    Position = "left"
})

DigToCoreSection:AddButton({
    Name = "Give money",
    Description = "Adds game currency",
    Callback = function()
        game:GetService("ReplicatedStorage").Remotes.AddRewardEvent:FireServer("Cash", 241561515)
    end
})

DigToCoreSection:AddButton({
    Name = "Give spins",
    Description = "Adds spins to roulette",
    Callback = function()
        game:GetService("ReplicatedStorage").Remotes.AddRewardEvent:FireServer("Spins", 51)
    end
})

DigToCoreSection:AddButton({
    Name = "Give pets",
    Description = "Adds rare pets",
    Callback = function()
        game:GetService("ReplicatedStorage").Remotes.PetCageEvent:FireServer("Lava Dominus")
    end
})

DigToCoreSection:AddButton({
    Name = "Give out 25k",
    Description = "Adds 25000 money",
    Callback = function()
        game:GetService("ReplicatedStorage").Remotes.SpinPrizeEvent:FireServer(2)
    end
})

DigToCoreSection:AddButton({
    Name = "Give 375 gems",
    Description = "Adds 375 gems",
    Callback = function()
        game:GetService("ReplicatedStorage").Remotes.SpinPrizeEvent:FireServer(5)
    end
})

DigToCoreSection:AddButton({
    Name = "Give spins",
    Description = "Adds spins",
    Callback = function()
        game:GetService("ReplicatedStorage").Remotes.SpinPrizeEvent:FireServer(3)
    end
})

DigToCoreSection:AddButton({
    Name = "X10 COINS",
    Description = "Increases income by 10 times",
    Callback = function()
        game:GetService("ReplicatedStorage").Remotes.SpinPrizeEvent:FireServer(8)
    end
})

-- Human Kebabs tab
local HumanKebabsTab = Window:DrawTab({
    Name = "Human Kebabs",
    Icon = "meh",
    EnableScrolling = true
})

local HumanKebabsSection = HumanKebabsTab:DrawSection({
    Name = "Features for Human Kebabs",
    Position = "left"
})

HumanKebabsSection:AddButton({
    Name = "Kill All",
    Description = "Automatically attacks all players",
    Callback = function()
        local player = game:GetService("Players").LocalPlayer
        local running = true
        
        _G.StopAutoSkewer = function()
            running = false
            return "Script stopped!"
        end
        
        task.spawn(function()
            while running do
                task.wait(0.1)
                for _, target in ipairs(game:GetService("Players"):GetPlayers()) do
                    if target ~= player and target.Character then
                        game:GetService("ReplicatedStorage").Remotes.Client.SkewerHit:FireServer(target)
                    end
                end
            end
        end)
    end
})

HumanKebabsSection:AddButton({
    Name = "Stop Kill All",
    Description = "Stops auto attack",
    Callback = function()
        if _G.StopAutoSkewer then
            _G.StopAutoSkewer()
        end
    end
})

-- Baseplate tab
local BaseplateTab = Window:DrawTab({
    Name = "Baseplate",
    Icon = "meh",
    EnableScrolling = true
})

local BaseplateSection = BaseplateTab:DrawSection({
    Name = "Functions for Baseplate",
    Position = "left"
})

BaseplateSection:AddButton({
    Name = "Script for Baseplate",
    Description = "Various functions for Baseplate",
    Callback = function()
        Functions.LoadScript("https://pastebin.com/raw/aAYx0WZG")
    end
})

-- ESP tab
local EspTab = Window:DrawTab({
    Name = "ESP",
    Icon = "meh",
    EnableScrolling = true
})

local EspSection = EspTab:DrawSection({
    Name = "ESP Functions",
    Position = "left"
})

EspSection:AddButton({
    Name = "Players ESP",
    Description = "Shows players through walls",
    Callback = function()
        Functions.LoadScript("https://pastebin.com/raw/yKvD4NzC")
    end
})

-- Aimbot tab
local AimbotTab = Window:DrawTab({
    Name = "Aimbot",
    Icon = "crosshair",
    EnableScrolling = true
})

local AimbotSection = AimbotTab:DrawSection({
    Name = "Aimbot Settings",
    Position = "left"
})

local aimbotEnabled = false
local aimParts = {"Head"}
local aimFov = 100
local smoothing = 0.05
local prediction = 0.1
local wallCheck = true
local teamCheck = false

AimbotSection:AddToggle({
    Name = "Enable Aimbot",
    Default = false,
    Callback = function(v)
        aimbotEnabled = v
    end
})

AimbotSection:AddDropdown({
    Name = "Body Part",
    Values = {"Head", "HumanoidRootPart", "Torso"},
    Default = "Head",
    Callback = function(v)
        aimParts = {v}
    end
})

AimbotSection:AddSlider({
    Name = "Field of view",
    Min = 10,
    Max = 500,
    Default = 100,
    Callback = function(v)
        aimFov = v
    end
})

AimbotSection:AddSlider({
    Name = "Smoothing",
    Min = 1,
    Max = 100,
    Default = 5,
    Callback = function(v)
        smoothing = v / 100
    end
})

AimbotSection:AddSlider({
    Name = "Prediction",
    Min = 0,
    Max = 20,
    Default = 10,
    Callback = function(v)
        prediction = v / 100
    end
})

AimbotSection:AddToggle({
    Name = "Wall Check",
    Default = true,
    Callback = function(v)
        wallCheck = v
    end
})

AimbotSection:AddToggle({
    Name = "Team Check",
    Default = false,
    Callback = function(v)
        teamCheck = v
    end
})

-- Settings tab
local SettingsTab = Window:DrawTab({
    Name = "Settings",
    Icon = "settings",
    Type = "Single"
})

local UISettings = SettingsTab:DrawSection({
    Name = "Interface settings",
    Position = "left"
})

UISettings:AddToggle({
    Name = "Always show UI",
    Description = "Disables automatic hiding of the interface",
    Default = false,
    Callback = function(v)
        Window.AlwayShowTab = v
    end
})

UISettings:AddColorPicker({
    Name = "Interface Color",
    Description = "Changes the main color of elements",
    Default = Compkiller.Colors.Highlight,
    Callback = function(v)
        Compkiller.Colors.Highlight = v
        Compkiller:RefreshCurrentColor()
    end
})

UISettings:AddButton({
    Name = "Save settings",
    Callback = function()
        ConfigManager:Save()
        Notifier.new({
            Title = "Success",
            Content = "Settings saved!",
            Duration = 3
        })
    end
})

UISettings:AddButton({
    Name = "Load settings",
    Callback = function()
        ConfigManager:Load()
        Notifier.new({
            Title = "Success",
            Content = "Settings loaded!",
            Duration = 3
        })
    end
})

-- Configuration
local ConfigUI = Window:DrawConfig({
    Name = "Configuration",
    Icon = "folder",
    Config = ConfigManager
})

ConfigUI:Init()

-- Autoload
task.spawn(function()
    task.wait(1)
    ConfigManager:Load()
end)
